
hwaseen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000564  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000869  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Timer0_init>:
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	e2 e5       	ldi	r30, 0x52	; 82
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	10 82       	st	Z, r1
  7a:	a3 e5       	ldi	r26, 0x53	; 83
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	e3 e5       	ldi	r30, 0x53	; 83
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 81       	ld	r24, Z
  84:	8a 66       	ori	r24, 0x6A	; 106
  86:	8c 93       	st	X, r24
  88:	a7 e3       	ldi	r26, 0x37	; 55
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e7 e3       	ldi	r30, 0x37	; 55
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	88 60       	ori	r24, 0x08	; 8
  94:	8c 93       	st	X, r24
  96:	cf 91       	pop	r28
  98:	df 91       	pop	r29
  9a:	08 95       	ret

0000009c <Duty_cycle>:
void Timer0_init() {
	TCNT0 = 0;
	TCCR0 |= (1 << WGM00) | (1 << COM01) | (1 << WGM01) | (1 << CS01);
	DDRB |= (1 << PB3);
}
void Duty_cycle(int duty_cycle) {
  9c:	df 93       	push	r29
  9e:	cf 93       	push	r28
  a0:	00 d0       	rcall	.+0      	; 0xa2 <Duty_cycle+0x6>
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = duty_cycle;
  aa:	ec e5       	ldi	r30, 0x5C	; 92
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	80 83       	st	Z, r24
}
  b2:	0f 90       	pop	r0
  b4:	0f 90       	pop	r0
  b6:	cf 91       	pop	r28
  b8:	df 91       	pop	r29
  ba:	08 95       	ret

000000bc <main>:
int main() {
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	Timer0_init();
  c4:	0e 94 36 00 	call	0x6c	; 0x6c <Timer0_init>
	DDRA &= ~(1 << PA0) & ~(1 << PA1) & ~(1 << PA2);
  c8:	aa e3       	ldi	r26, 0x3A	; 58
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	ea e3       	ldi	r30, 0x3A	; 58
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 7f       	andi	r24, 0xF8	; 248
  d4:	8c 93       	st	X, r24
	DDRC |= (1 << PC0) | (1 << PC1);
  d6:	a4 e3       	ldi	r26, 0x34	; 52
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	e4 e3       	ldi	r30, 0x34	; 52
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	83 60       	ori	r24, 0x03	; 3
  e2:	8c 93       	st	X, r24
	PORTC &= 0b11111100;
  e4:	a5 e3       	ldi	r26, 0x35	; 53
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e5 e3       	ldi	r30, 0x35	; 53
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	8c 7f       	andi	r24, 0xFC	; 252
  f0:	8c 93       	st	X, r24
	while (1) {
		if (PINA & (1 << PA0)) {
  f2:	e9 e3       	ldi	r30, 0x39	; 57
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	81 70       	andi	r24, 0x01	; 1
  fe:	90 70       	andi	r25, 0x00	; 0
 100:	88 23       	and	r24, r24
 102:	99 f0       	breq	.+38     	; 0x12a <main+0x6e>
			Duty_cycle(64);
 104:	80 e4       	ldi	r24, 0x40	; 64
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 4e 00 	call	0x9c	; 0x9c <Duty_cycle>
			PORTC &= (~(1 << PC0));
 10c:	a5 e3       	ldi	r26, 0x35	; 53
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e5 e3       	ldi	r30, 0x35	; 53
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	8c 93       	st	X, r24
			PORTC |= (1 << PC1);
 11a:	a5 e3       	ldi	r26, 0x35	; 53
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e5 e3       	ldi	r30, 0x35	; 53
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	8c 93       	st	X, r24
 128:	e4 cf       	rjmp	.-56     	; 0xf2 <main+0x36>
		} else if (PINA & (1 << PA1)) {
 12a:	e9 e3       	ldi	r30, 0x39	; 57
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	82 70       	andi	r24, 0x02	; 2
 136:	90 70       	andi	r25, 0x00	; 0
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	99 f0       	breq	.+38     	; 0x162 <main+0xa6>
			Duty_cycle(128);
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 4e 00 	call	0x9c	; 0x9c <Duty_cycle>
			PORTC &= (~(1 << PC0));
 144:	a5 e3       	ldi	r26, 0x35	; 53
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	e5 e3       	ldi	r30, 0x35	; 53
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8e 7f       	andi	r24, 0xFE	; 254
 150:	8c 93       	st	X, r24
			PORTC |= (1 << PC1);
 152:	a5 e3       	ldi	r26, 0x35	; 53
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	e5 e3       	ldi	r30, 0x35	; 53
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	8c 93       	st	X, r24
 160:	c8 cf       	rjmp	.-112    	; 0xf2 <main+0x36>
		} else if (PINA & (1 << PA2)) {
 162:	e9 e3       	ldi	r30, 0x39	; 57
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	88 2f       	mov	r24, r24
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	84 70       	andi	r24, 0x04	; 4
 16e:	90 70       	andi	r25, 0x00	; 0
 170:	00 97       	sbiw	r24, 0x00	; 0
 172:	09 f4       	brne	.+2      	; 0x176 <main+0xba>
 174:	be cf       	rjmp	.-132    	; 0xf2 <main+0x36>
			Duty_cycle(255);
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 4e 00 	call	0x9c	; 0x9c <Duty_cycle>
			PORTC &= (~(1 << PC0));
 17e:	a5 e3       	ldi	r26, 0x35	; 53
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	e5 e3       	ldi	r30, 0x35	; 53
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	8c 93       	st	X, r24
			PORTC |= (1 << PC1);
 18c:	a5 e3       	ldi	r26, 0x35	; 53
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	e5 e3       	ldi	r30, 0x35	; 53
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	82 60       	ori	r24, 0x02	; 2
 198:	8c 93       	st	X, r24
 19a:	ab cf       	rjmp	.-170    	; 0xf2 <main+0x36>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
