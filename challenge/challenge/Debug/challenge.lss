
challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001f4  2**0
                  ALLOC
  2 .stab         00000468  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000083d  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  74:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
unsigned char counter = 0;
unsigned char ticks = 0;
ISR(TIMER0_OVF_vect) {
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	af 93       	push	r26
  8a:	bf 93       	push	r27
  8c:	ef 93       	push	r30
  8e:	ff 93       	push	r31
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
	ticks++;
  98:	80 91 61 00 	lds	r24, 0x0061
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	80 93 61 00 	sts	0x0061, r24
	if(ticks==123)
  a2:	80 91 61 00 	lds	r24, 0x0061
  a6:	8b 37       	cpi	r24, 0x7B	; 123
  a8:	71 f4       	brne	.+28     	; 0xc6 <__vector_9+0x4a>
	{
		counter++;
  aa:	80 91 60 00 	lds	r24, 0x0060
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	80 93 60 00 	sts	0x0060, r24
		TIFR |= (1 << TOV0);
  b4:	a8 e5       	ldi	r26, 0x58	; 88
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e8 e5       	ldi	r30, 0x58	; 88
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	8c 93       	st	X, r24
		ticks=0;
  c2:	10 92 61 00 	sts	0x0061, r1
	}
}
  c6:	cf 91       	pop	r28
  c8:	df 91       	pop	r29
  ca:	ff 91       	pop	r31
  cc:	ef 91       	pop	r30
  ce:	bf 91       	pop	r27
  d0:	af 91       	pop	r26
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <Timer0_init>:
void Timer0_init() {
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= (1 << CS02) | (1 << FOC0);
  e6:	a3 e5       	ldi	r26, 0x53	; 83
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	e3 e5       	ldi	r30, 0x53	; 83
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	84 68       	ori	r24, 0x84	; 132
  f2:	8c 93       	st	X, r24
	TCNT0 = 0x00;
  f4:	e2 e5       	ldi	r30, 0x52	; 82
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	10 82       	st	Z, r1
	TIMSK |= (1 << TOIE0);
  fa:	a9 e5       	ldi	r26, 0x59	; 89
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	e9 e5       	ldi	r30, 0x59	; 89
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	8c 93       	st	X, r24
}
 108:	cf 91       	pop	r28
 10a:	df 91       	pop	r29
 10c:	08 95       	ret

0000010e <main>:
void main() {
 10e:	df 93       	push	r29
 110:	cf 93       	push	r28
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
	Timer0_init();
 116:	0e 94 6f 00 	call	0xde	; 0xde <Timer0_init>
	SREG |= (1 << 7);
 11a:	af e5       	ldi	r26, 0x5F	; 95
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	ef e5       	ldi	r30, 0x5F	; 95
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 68       	ori	r24, 0x80	; 128
 126:	8c 93       	st	X, r24
	DDRC |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);
 128:	a4 e3       	ldi	r26, 0x34	; 52
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	e4 e3       	ldi	r30, 0x34	; 52
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	8f 60       	ori	r24, 0x0F	; 15
 134:	8c 93       	st	X, r24
	PORTC = 0x00;
 136:	e5 e3       	ldi	r30, 0x35	; 53
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	10 82       	st	Z, r1
	while (1) {
		if (counter == 10) {
 13c:	80 91 60 00 	lds	r24, 0x0060
 140:	8a 30       	cpi	r24, 0x0A	; 10
 142:	79 f4       	brne	.+30     	; 0x162 <main+0x54>
			PORTC = (PORTC & 0xF0) | (counter & 0x0f);
 144:	a5 e3       	ldi	r26, 0x35	; 53
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	e5 e3       	ldi	r30, 0x35	; 53
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	98 2f       	mov	r25, r24
 150:	90 7f       	andi	r25, 0xF0	; 240
 152:	80 91 60 00 	lds	r24, 0x0060
 156:	8f 70       	andi	r24, 0x0F	; 15
 158:	89 2b       	or	r24, r25
 15a:	8c 93       	st	X, r24
			counter = 0;
 15c:	10 92 60 00 	sts	0x0060, r1
 160:	ed cf       	rjmp	.-38     	; 0x13c <main+0x2e>
		} else {
			PORTC = (PORTC & 0xF0) | (counter & 0x0f);
 162:	a5 e3       	ldi	r26, 0x35	; 53
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e5 e3       	ldi	r30, 0x35	; 53
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	98 2f       	mov	r25, r24
 16e:	90 7f       	andi	r25, 0xF0	; 240
 170:	80 91 60 00 	lds	r24, 0x0060
 174:	8f 70       	andi	r24, 0x0F	; 15
 176:	89 2b       	or	r24, r25
 178:	8c 93       	st	X, r24
 17a:	e0 cf       	rjmp	.-64     	; 0x13c <main+0x2e>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
